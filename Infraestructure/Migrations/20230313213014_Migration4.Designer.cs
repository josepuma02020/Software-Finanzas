// <auto-generated />
using System;
using Infraestructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructure.Migrations
{
    [DbContext(typeof(FinanzasContext))]
    [Migration("20230313213014_Migration4")]
    partial class Migration4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Aplicacion.Configuracion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Año")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<int>("MultiploRevisarNotaContable")
                        .HasColumnType("int");

                    b.Property<long>("Salariominimo")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("UsuarioCreadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioEditorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEditorId");

                    b.ToTable("Configuracion", "Finanzas");
                });

            modelBuilder.Entity("Domain.Aplicacion.ConfiguracionProcesoNotasContables", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Año")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaCierre")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<int>("Mes")
                        .HasColumnType("int");

                    b.Property<Guid>("ProcesoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioCreadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioEditorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProcesoId");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEditorId");

                    b.ToTable("ConfiguracionProcesoNotasContables", "Finanzas");
                });

            modelBuilder.Entity("Domain.Aplicacion.ConfiguracionServicios", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Servicio")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid?>("UsuarioCreadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioEditorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEditorId");

                    b.ToTable("ConfiguracionServicios", "Finanzas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb4f80cd-8497-4b57-96e5-5732330a61b4"),
                            Activo = true,
                            FechaDeCreacion = new DateTime(2023, 3, 13, 16, 30, 13, 821, DateTimeKind.Local).AddTicks(9325),
                            Servicio = "Facturas"
                        },
                        new
                        {
                            Id = new Guid("1b70d3d4-e56e-409b-b4b1-bc65db57dca7"),
                            Activo = true,
                            FechaDeCreacion = new DateTime(2023, 3, 13, 16, 30, 13, 821, DateTimeKind.Local).AddTicks(9388),
                            Servicio = "Notas Contables"
                        },
                        new
                        {
                            Id = new Guid("7c18fa5e-0eb1-4920-9b32-73fa27dd7915"),
                            Activo = true,
                            FechaDeCreacion = new DateTime(2023, 3, 13, 16, 30, 13, 821, DateTimeKind.Local).AddTicks(9391),
                            Servicio = "Flujo de Caja"
                        });
                });

            modelBuilder.Entity("Domain.Aplicacion.Entidades.CuentasContables.ConceptoxCuentaContable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CuentaContableCreditoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CuentaContableDebitoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UsuarioCreadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioEditorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CuentaContableCreditoId");

                    b.HasIndex("CuentaContableDebitoId");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEditorId");

                    b.ToTable("ConceptoxCuentaContable", "Finanzas");
                });

            modelBuilder.Entity("Domain.Aplicacion.Entidades.Entidad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreEntidad")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UsuarioCreadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioEditorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEditorId");

                    b.ToTable("Entidad", "Finanzas");
                });

            modelBuilder.Entity("Domain.Aplicacion.EntidadesConfiguracion.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodigoDependencia")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreArea")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid?>("UsuarioCreadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioEditorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEditorId");

                    b.ToTable("Area", "Finanzas");
                });

            modelBuilder.Entity("Domain.Aplicacion.EntidadesConfiguracion.Equipo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodigoEquipo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreEquipo")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid?>("UsuarioCreadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioEditorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEditorId");

                    b.ToTable("Equipo", "Finanzas");
                });

            modelBuilder.Entity("Domain.Aplicacion.EntidadesConfiguracion.Proceso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreProceso")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid?>("UsuarioCreadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioEditorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("EquipoId");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEditorId");

                    b.ToTable("Proceso", "Finanzas");
                });

            modelBuilder.Entity("Domain.Aplicacion.EntidadesConfiguracion.Tercero", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Codigotercero")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ObservacionAdicional")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("UsuarioCreadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioEditorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEditorId");

                    b.ToTable("Tercero", "Finanzas");
                });

            modelBuilder.Entity("Domain.Base.BaseEntityDocumento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AnuladorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AprobadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AutorizadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("EditarSoportes")
                        .HasColumnType("bit");

                    b.Property<Guid>("EquipoCreadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EstadoDocumento")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAnulacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaAprobacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaAutorizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaVerificacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Fechabot")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProcesoDocumento")
                        .HasColumnType("int");

                    b.Property<Guid>("RechazadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReversorJDId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioBotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioCreadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioEditorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioRevisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VerificadorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnuladorId");

                    b.HasIndex("AprobadorId");

                    b.HasIndex("AutorizadorId");

                    b.HasIndex("EquipoCreadorId");

                    b.HasIndex("RechazadorId");

                    b.HasIndex("ReversorJDId");

                    b.HasIndex("UsuarioBotId");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEditorId");

                    b.HasIndex("UsuarioRevisionId");

                    b.HasIndex("VerificadorId");

                    b.ToTable("BaseEntityDocumento", "Finanzas");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Base.Cuenta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescripcionCuenta")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EntidadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumeroCuenta")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("TipoCuenta")
                        .HasColumnType("int");

                    b.Property<Guid?>("UsuarioCreadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioEditorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntidadId");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEditorId");

                    b.ToTable("Cuenta", "Finanzas");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Cuenta");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Documentos.ConceptoFactura", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Concepto")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UsuarioCreadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioEditorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEditorId");

                    b.ToTable("ConceptoFactura", "Finanzas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f190b3f5-dfad-4b63-8856-13996939437e"),
                            Concepto = "RI",
                            FechaDeCreacion = new DateTime(2023, 3, 13, 16, 30, 13, 821, DateTimeKind.Local).AddTicks(9650)
                        });
                });

            modelBuilder.Entity("Domain.Documentos.ConfiguracionDocumentos.ClasificacionDocumento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClasificacionProceso")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UsuarioCreadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioEditorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEditorId");

                    b.ToTable("ClasificacionDocumento", "Finanzas");
                });

            modelBuilder.Entity("Domain.Documentos.ConfiguracionDocumentos.TipoDocumento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodigoTipoDocumento")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DescripcionTipoDocumento")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UsuarioCreadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioEditorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEditorId");

                    b.ToTable("TipoDocumento", "Finanzas");
                });

            modelBuilder.Entity("Domain.Documentos.CuentasBancariasxFactura", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CuentaBancariaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UsuarioCreadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioEditorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CuentaBancariaId");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEditorId");

                    b.ToTable("CuentasBancariasxFactura", "Finanzas");
                });

            modelBuilder.Entity("Domain.Documentos.Pagos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Concepto")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("CuentaBancariaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Estimado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid?>("UsuarioCreadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioEditorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Valor")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CuentaBancariaId");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEditorId");

                    b.ToTable("Pagos", "Finanzas");
                });

            modelBuilder.Entity("Domain.Documentos.Registrodenotacontable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CuentaContableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<long>("Importe")
                        .HasColumnType("bigint");

                    b.Property<Guid>("NotaContableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TerceroAN8Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TerceroLMId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioCreadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioEditorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CuentaContableId");

                    b.HasIndex("NotaContableId");

                    b.HasIndex("TerceroAN8Id");

                    b.HasIndex("TerceroLMId");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEditorId");

                    b.ToTable("Registrodenotacontable", "Finanzas");
                });

            modelBuilder.Entity("Domain.Documentos.TipoPago", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdTipoPago")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid?>("UsuarioCreadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioEditorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEditorId");

                    b.ToTable("TipoPago", "Finanzas");
                });

            modelBuilder.Entity("Domain.Entities.AppFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BaseEntityDocumentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid?>("UsuarioCreadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioEditorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BaseEntityDocumentoId");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEditorId");

                    b.ToTable("AppFile", "Finanzas");
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid>("EquipoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identificacion")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid?>("ProcesoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rol")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Ultingreso")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UsuarioCreadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioEditorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("EquipoId");

                    b.HasIndex("ProcesoId");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioEditorId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Usuario", "Finanzas");
                });

            modelBuilder.Entity("Domain.Documentos.Factura", b =>
                {
                    b.HasBaseType("Domain.Base.BaseEntityDocumento");

                    b.Property<Guid>("ConceptoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CuentaBancariaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CuentaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Fechapago")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ri")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("TerceroId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Valor")
                        .HasColumnType("bigint");

                    b.HasIndex("ConceptoId");

                    b.HasIndex("CuentaBancariaId");

                    b.HasIndex("TerceroId");

                    b.ToTable("Factura", "Finanzas");
                });

            modelBuilder.Entity("Domain.Documentos.NotaContable", b =>
                {
                    b.HasBaseType("Domain.Base.BaseEntityDocumento");

                    b.Property<string>("Batch")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("ClasificacionDocumentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comentario")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("EquipoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FechaNota")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Fechabatch")
                        .HasColumnType("datetime2");

                    b.Property<long>("Importe")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ProcesoId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RevisionesFinanciacion")
                        .HasColumnType("bit");

                    b.Property<bool>("RevisionesGestionContable")
                        .HasColumnType("bit");

                    b.Property<long>("SalarioMinimoVigente")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TipoDocumentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Tiponotacontable")
                        .HasColumnType("int");

                    b.Property<bool>("revisable")
                        .HasColumnType("bit");

                    b.HasIndex("ClasificacionDocumentoId");

                    b.HasIndex("EquipoId");

                    b.HasIndex("ProcesoId");

                    b.HasIndex("TipoDocumentoId");

                    b.ToTable("NotaContable", "Finanzas");
                });

            modelBuilder.Entity("Domain.Documentos.Saldos", b =>
                {
                    b.HasBaseType("Domain.Base.BaseEntityDocumento");

                    b.Property<Guid>("CuentaBancariaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntidadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("SaldoDisponible")
                        .HasColumnType("bigint");

                    b.Property<long>("SaldoTotal")
                        .HasColumnType("bigint");

                    b.Property<bool>("TieneDisponible")
                        .HasColumnType("bit");

                    b.HasIndex("CuentaBancariaId");

                    b.ToTable("Saldos", "Finanzas");
                });

            modelBuilder.Entity("Domain.Aplicacion.Entidades.CuentasBancarias.CuentaBancaria", b =>
                {
                    b.HasBaseType("Domain.Base.Cuenta");

                    b.Property<int?>("TipoCuentaBancaria")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("CuentaBancaria");
                });

            modelBuilder.Entity("Domain.Aplicacion.Entidades.CuentasContables.CuentaContable", b =>
                {
                    b.HasBaseType("Domain.Base.Cuenta");

                    b.Property<Guid?>("CuentaBancariaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CuentaBancariaId");

                    b.HasDiscriminator().HasValue("CuentaContable");
                });

            modelBuilder.Entity("Domain.Aplicacion.Configuracion", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Usuario", "UsuarioEditor")
                        .WithMany("ConfiguracionesCreadas")
                        .HasForeignKey("UsuarioEditorId");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEditor");
                });

            modelBuilder.Entity("Domain.Aplicacion.ConfiguracionProcesoNotasContables", b =>
                {
                    b.HasOne("Domain.Aplicacion.EntidadesConfiguracion.Proceso", "ProcesoNotaContable")
                        .WithMany("ConfiguracionesNotasContables")
                        .HasForeignKey("ProcesoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Usuario", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Usuario", "UsuarioEditor")
                        .WithMany("ConfiguracionesNotasContables")
                        .HasForeignKey("UsuarioEditorId");

                    b.Navigation("ProcesoNotaContable");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEditor");
                });

            modelBuilder.Entity("Domain.Aplicacion.ConfiguracionServicios", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Usuario", "UsuarioEditor")
                        .WithMany("ConfiguracionesServicios")
                        .HasForeignKey("UsuarioEditorId");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEditor");
                });

            modelBuilder.Entity("Domain.Aplicacion.Entidades.CuentasContables.ConceptoxCuentaContable", b =>
                {
                    b.HasOne("Domain.Aplicacion.Entidades.CuentasContables.CuentaContable", "CuentaContableCredito")
                        .WithMany("ConceptosCuentasContableCredito")
                        .HasForeignKey("CuentaContableCreditoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Aplicacion.Entidades.CuentasContables.CuentaContable", "CuentaContableDebito")
                        .WithMany("ConceptosCuentasContableDebito")
                        .HasForeignKey("CuentaContableDebitoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Usuario", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Usuario", "UsuarioEditor")
                        .WithMany()
                        .HasForeignKey("UsuarioEditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CuentaContableCredito");

                    b.Navigation("CuentaContableDebito");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEditor");
                });

            modelBuilder.Entity("Domain.Aplicacion.Entidades.Entidad", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", "UsuarioCreador")
                        .WithMany("EntidadesCreadas")
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Usuario", "UsuarioEditor")
                        .WithMany()
                        .HasForeignKey("UsuarioEditorId");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEditor");
                });

            modelBuilder.Entity("Domain.Aplicacion.EntidadesConfiguracion.Area", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", "UsuarioCreador")
                        .WithMany("AreasCreadas")
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Usuario", "UsuarioEditor")
                        .WithMany("AreasEditadas")
                        .HasForeignKey("UsuarioEditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEditor");
                });

            modelBuilder.Entity("Domain.Aplicacion.EntidadesConfiguracion.Equipo", b =>
                {
                    b.HasOne("Domain.Aplicacion.EntidadesConfiguracion.Area", "Area")
                        .WithMany("Equipos")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Usuario", "UsuarioCreador")
                        .WithMany("EquiposCreados")
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Usuario", "UsuarioEditor")
                        .WithMany("EquipoEditados")
                        .HasForeignKey("UsuarioEditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Area");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEditor");
                });

            modelBuilder.Entity("Domain.Aplicacion.EntidadesConfiguracion.Proceso", b =>
                {
                    b.HasOne("Domain.Aplicacion.EntidadesConfiguracion.Area", "Area")
                        .WithMany("Procesos")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Aplicacion.EntidadesConfiguracion.Equipo", "Equipo")
                        .WithMany("Procesos")
                        .HasForeignKey("EquipoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Usuario", "UsuarioCreador")
                        .WithMany("ProcesosCreados")
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Usuario", "UsuarioEditor")
                        .WithMany("ProcesosEditados")
                        .HasForeignKey("UsuarioEditorId");

                    b.Navigation("Area");

                    b.Navigation("Equipo");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEditor");
                });

            modelBuilder.Entity("Domain.Aplicacion.EntidadesConfiguracion.Tercero", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId");

                    b.HasOne("Domain.Entities.Usuario", "UsuarioEditor")
                        .WithMany()
                        .HasForeignKey("UsuarioEditorId");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEditor");
                });

            modelBuilder.Entity("Domain.Base.BaseEntityDocumento", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", "Anulador")
                        .WithMany("DocumentosAnulados")
                        .HasForeignKey("AnuladorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Usuario", "Aprobador")
                        .WithMany("DocumentosAprobados")
                        .HasForeignKey("AprobadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Usuario", "Autorizador")
                        .WithMany("DocumentosAutorizados")
                        .HasForeignKey("AutorizadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Aplicacion.EntidadesConfiguracion.Equipo", "EquipoCreador")
                        .WithMany("DocumentosCreados")
                        .HasForeignKey("EquipoCreadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Usuario", "Rechazador")
                        .WithMany("DocumentosRechazados")
                        .HasForeignKey("RechazadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Usuario", "ReversorJD")
                        .WithMany("DocumentosRevertidos")
                        .HasForeignKey("ReversorJDId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Usuario", "UsuarioBot")
                        .WithMany("DocumentosBot")
                        .HasForeignKey("UsuarioBotId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Usuario", "UsuarioCreador")
                        .WithMany("DocumentosCreados")
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Usuario", "UsuarioEditor")
                        .WithMany("DocumentosEditados")
                        .HasForeignKey("UsuarioEditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Usuario", "UsuarioEnviaRevision")
                        .WithMany("DocumentosEnviadosaRevision")
                        .HasForeignKey("UsuarioRevisionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Usuario", "Verificador")
                        .WithMany("DocumentosCerrados")
                        .HasForeignKey("VerificadorId");

                    b.Navigation("Anulador");

                    b.Navigation("Aprobador");

                    b.Navigation("Autorizador");

                    b.Navigation("EquipoCreador");

                    b.Navigation("Rechazador");

                    b.Navigation("ReversorJD");

                    b.Navigation("UsuarioBot");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEditor");

                    b.Navigation("UsuarioEnviaRevision");

                    b.Navigation("Verificador");
                });

            modelBuilder.Entity("Domain.Base.Cuenta", b =>
                {
                    b.HasOne("Domain.Aplicacion.Entidades.Entidad", "Entidad")
                        .WithMany("Cuentas")
                        .HasForeignKey("EntidadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Usuario", "UsuarioCreador")
                        .WithMany("CuentasCreadas")
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Usuario", "UsuarioEditor")
                        .WithMany("CuentasEditadas")
                        .HasForeignKey("UsuarioEditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Entidad");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEditor");
                });

            modelBuilder.Entity("Domain.Documentos.ConceptoFactura", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId");

                    b.HasOne("Domain.Entities.Usuario", "UsuarioEditor")
                        .WithMany()
                        .HasForeignKey("UsuarioEditorId");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEditor");
                });

            modelBuilder.Entity("Domain.Documentos.ConfiguracionDocumentos.ClasificacionDocumento", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", "UsuarioCreador")
                        .WithMany("ClasificacionesdeDocumentoCreadas")
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Usuario", "UsuarioEditor")
                        .WithMany("ClasificacionesdeDocumentoEditadas")
                        .HasForeignKey("UsuarioEditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEditor");
                });

            modelBuilder.Entity("Domain.Documentos.ConfiguracionDocumentos.TipoDocumento", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", "UsuarioCreador")
                        .WithMany("TiposdeDocumentosCreados")
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Usuario", "UsuarioEditor")
                        .WithMany()
                        .HasForeignKey("UsuarioEditorId");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEditor");
                });

            modelBuilder.Entity("Domain.Documentos.CuentasBancariasxFactura", b =>
                {
                    b.HasOne("Domain.Aplicacion.Entidades.CuentasBancarias.CuentaBancaria", "CuentaBancaria")
                        .WithMany("CuentasxFacturas")
                        .HasForeignKey("CuentaBancariaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Usuario", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId");

                    b.HasOne("Domain.Entities.Usuario", "UsuarioEditor")
                        .WithMany()
                        .HasForeignKey("UsuarioEditorId");

                    b.Navigation("CuentaBancaria");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEditor");
                });

            modelBuilder.Entity("Domain.Documentos.Pagos", b =>
                {
                    b.HasOne("Domain.Aplicacion.Entidades.CuentasBancarias.CuentaBancaria", "CuentaBancaria")
                        .WithMany("Pagos")
                        .HasForeignKey("CuentaBancariaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Usuario", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId");

                    b.HasOne("Domain.Entities.Usuario", "UsuarioEditor")
                        .WithMany()
                        .HasForeignKey("UsuarioEditorId");

                    b.Navigation("CuentaBancaria");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEditor");
                });

            modelBuilder.Entity("Domain.Documentos.Registrodenotacontable", b =>
                {
                    b.HasOne("Domain.Aplicacion.Entidades.CuentasContables.CuentaContable", "CuentaContable")
                        .WithMany("RegistrosNotaContable")
                        .HasForeignKey("CuentaContableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Documentos.NotaContable", "NotaContable")
                        .WithMany("Registrosnota")
                        .HasForeignKey("NotaContableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Aplicacion.EntidadesConfiguracion.Tercero", "TerceroAN8")
                        .WithMany("TercerosAN8")
                        .HasForeignKey("TerceroAN8Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Aplicacion.EntidadesConfiguracion.Tercero", "TerceroLM")
                        .WithMany("TercerosLM")
                        .HasForeignKey("TerceroLMId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Usuario", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId");

                    b.HasOne("Domain.Entities.Usuario", "UsuarioEditor")
                        .WithMany()
                        .HasForeignKey("UsuarioEditorId");

                    b.Navigation("CuentaContable");

                    b.Navigation("NotaContable");

                    b.Navigation("TerceroAN8");

                    b.Navigation("TerceroLM");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEditor");
                });

            modelBuilder.Entity("Domain.Documentos.TipoPago", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId");

                    b.HasOne("Domain.Entities.Usuario", "UsuarioEditor")
                        .WithMany()
                        .HasForeignKey("UsuarioEditorId");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEditor");
                });

            modelBuilder.Entity("Domain.Entities.AppFile", b =>
                {
                    b.HasOne("Domain.Base.BaseEntityDocumento", null)
                        .WithMany("Soportes")
                        .HasForeignKey("BaseEntityDocumentoId");

                    b.HasOne("Domain.Entities.Usuario", "UsuarioCreador")
                        .WithMany("ArchivosCargados")
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Usuario", "UsuarioEditor")
                        .WithMany()
                        .HasForeignKey("UsuarioEditorId");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEditor");
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.HasOne("Domain.Aplicacion.EntidadesConfiguracion.Area", "Area")
                        .WithMany("Usuarios")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Aplicacion.EntidadesConfiguracion.Equipo", "Equipo")
                        .WithMany()
                        .HasForeignKey("EquipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Aplicacion.EntidadesConfiguracion.Proceso", "Proceso")
                        .WithMany("Usuarios")
                        .HasForeignKey("ProcesoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Usuario", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Usuario", "UsuarioEditor")
                        .WithMany()
                        .HasForeignKey("UsuarioEditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Usuario", null)
                        .WithMany("UsuariosqueAgregoProceso")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Area");

                    b.Navigation("Equipo");

                    b.Navigation("Proceso");

                    b.Navigation("UsuarioCreador");

                    b.Navigation("UsuarioEditor");
                });

            modelBuilder.Entity("Domain.Documentos.Factura", b =>
                {
                    b.HasOne("Domain.Documentos.ConceptoFactura", "Concepto")
                        .WithMany("Facturas")
                        .HasForeignKey("ConceptoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Aplicacion.Entidades.CuentasBancarias.CuentaBancaria", "CuentaBancaria")
                        .WithMany("Facturas")
                        .HasForeignKey("CuentaBancariaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Base.BaseEntityDocumento", null)
                        .WithOne()
                        .HasForeignKey("Domain.Documentos.Factura", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Aplicacion.EntidadesConfiguracion.Tercero", "Tercero")
                        .WithMany("Facturas")
                        .HasForeignKey("TerceroId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Concepto");

                    b.Navigation("CuentaBancaria");

                    b.Navigation("Tercero");
                });

            modelBuilder.Entity("Domain.Documentos.NotaContable", b =>
                {
                    b.HasOne("Domain.Documentos.ConfiguracionDocumentos.ClasificacionDocumento", "ClasificacionDocumento")
                        .WithMany("NotasContables")
                        .HasForeignKey("ClasificacionDocumentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Aplicacion.EntidadesConfiguracion.Equipo", "Equipo")
                        .WithMany("NotasContables")
                        .HasForeignKey("EquipoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Base.BaseEntityDocumento", null)
                        .WithOne()
                        .HasForeignKey("Domain.Documentos.NotaContable", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Aplicacion.EntidadesConfiguracion.Proceso", "Proceso")
                        .WithMany("NotasContables")
                        .HasForeignKey("ProcesoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Documentos.ConfiguracionDocumentos.TipoDocumento", "TipoDocumento")
                        .WithMany("NotasContables")
                        .HasForeignKey("TipoDocumentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClasificacionDocumento");

                    b.Navigation("Equipo");

                    b.Navigation("Proceso");

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("Domain.Documentos.Saldos", b =>
                {
                    b.HasOne("Domain.Aplicacion.Entidades.CuentasBancarias.CuentaBancaria", "CuentaBancaria")
                        .WithMany("Saldos")
                        .HasForeignKey("CuentaBancariaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Base.BaseEntityDocumento", null)
                        .WithOne()
                        .HasForeignKey("Domain.Documentos.Saldos", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CuentaBancaria");
                });

            modelBuilder.Entity("Domain.Aplicacion.Entidades.CuentasContables.CuentaContable", b =>
                {
                    b.HasOne("Domain.Aplicacion.Entidades.CuentasBancarias.CuentaBancaria", "CuentaBancaria")
                        .WithMany("CuentasContables")
                        .HasForeignKey("CuentaBancariaId");

                    b.Navigation("CuentaBancaria");
                });

            modelBuilder.Entity("Domain.Aplicacion.Entidades.Entidad", b =>
                {
                    b.Navigation("Cuentas");
                });

            modelBuilder.Entity("Domain.Aplicacion.EntidadesConfiguracion.Area", b =>
                {
                    b.Navigation("Equipos");

                    b.Navigation("Procesos");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Domain.Aplicacion.EntidadesConfiguracion.Equipo", b =>
                {
                    b.Navigation("DocumentosCreados");

                    b.Navigation("NotasContables");

                    b.Navigation("Procesos");
                });

            modelBuilder.Entity("Domain.Aplicacion.EntidadesConfiguracion.Proceso", b =>
                {
                    b.Navigation("ConfiguracionesNotasContables");

                    b.Navigation("NotasContables");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Domain.Aplicacion.EntidadesConfiguracion.Tercero", b =>
                {
                    b.Navigation("Facturas");

                    b.Navigation("TercerosAN8");

                    b.Navigation("TercerosLM");
                });

            modelBuilder.Entity("Domain.Base.BaseEntityDocumento", b =>
                {
                    b.Navigation("Soportes");
                });

            modelBuilder.Entity("Domain.Documentos.ConceptoFactura", b =>
                {
                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("Domain.Documentos.ConfiguracionDocumentos.ClasificacionDocumento", b =>
                {
                    b.Navigation("NotasContables");
                });

            modelBuilder.Entity("Domain.Documentos.ConfiguracionDocumentos.TipoDocumento", b =>
                {
                    b.Navigation("NotasContables");
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.Navigation("ArchivosCargados");

                    b.Navigation("AreasCreadas");

                    b.Navigation("AreasEditadas");

                    b.Navigation("ClasificacionesdeDocumentoCreadas");

                    b.Navigation("ClasificacionesdeDocumentoEditadas");

                    b.Navigation("ConfiguracionesCreadas");

                    b.Navigation("ConfiguracionesNotasContables");

                    b.Navigation("ConfiguracionesServicios");

                    b.Navigation("CuentasCreadas");

                    b.Navigation("CuentasEditadas");

                    b.Navigation("DocumentosAnulados");

                    b.Navigation("DocumentosAprobados");

                    b.Navigation("DocumentosAutorizados");

                    b.Navigation("DocumentosBot");

                    b.Navigation("DocumentosCerrados");

                    b.Navigation("DocumentosCreados");

                    b.Navigation("DocumentosEditados");

                    b.Navigation("DocumentosEnviadosaRevision");

                    b.Navigation("DocumentosRechazados");

                    b.Navigation("DocumentosRevertidos");

                    b.Navigation("EntidadesCreadas");

                    b.Navigation("EquipoEditados");

                    b.Navigation("EquiposCreados");

                    b.Navigation("ProcesosCreados");

                    b.Navigation("ProcesosEditados");

                    b.Navigation("TiposdeDocumentosCreados");

                    b.Navigation("UsuariosqueAgregoProceso");
                });

            modelBuilder.Entity("Domain.Documentos.NotaContable", b =>
                {
                    b.Navigation("Registrosnota");
                });

            modelBuilder.Entity("Domain.Aplicacion.Entidades.CuentasBancarias.CuentaBancaria", b =>
                {
                    b.Navigation("CuentasContables");

                    b.Navigation("CuentasxFacturas");

                    b.Navigation("Facturas");

                    b.Navigation("Pagos");

                    b.Navigation("Saldos");
                });

            modelBuilder.Entity("Domain.Aplicacion.Entidades.CuentasContables.CuentaContable", b =>
                {
                    b.Navigation("ConceptosCuentasContableCredito");

                    b.Navigation("ConceptosCuentasContableDebito");

                    b.Navigation("RegistrosNotaContable");
                });
#pragma warning restore 612, 618
        }
    }
}
